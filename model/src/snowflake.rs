/// Snowflake is a trait for defining extractable information from a Snowflake.
/// A Snowflake is a u64 generated by Discord to uniquely identify a resource.
pub trait Snowflake {
    fn id(&self) -> u64;

    /// The Unix epoch of the Snowflake in milliseconds indicating when it was generated.
    ///
    /// 22 bits
    ///
    /// # Examples
    ///
    /// See when a user was created using [`chrono`](https://docs.rs/chrono):
    ///
    /// ```rust,ignore
    /// use chrono::{Utc, TimeZone};
    /// use twilight_model::snowflake::Snowflake;
    /// use twilight_model::id::UserId;
    ///
    /// let id = UserId(105484726235607040);
    ///
    /// assert_eq!(
    ///     "2015-10-19T01:58:38.546+00:00",
    ///     Utc.timestamp_millis(id.timestamp()).to_rfc3339()
    /// );
    /// ```
    ///
    /// See when a user was created using [`time`](https://docs.rs/time):
    ///
    /// ```rust,ignore
    /// use time::{Duration, Format, OffsetDateTime};
    /// use twilight_model::snowflake::Snowflake;
    /// use twilight_model::id::UserId;
    ///
    /// let id = UserId(105484726235607040);
    /// let dur = Duration::milliseconds(id.timestamp());
    /// // Or use seconds, at the cost of precision loss.
    /// let ts = OffsetDateTime::from_unix_timestamp_nanos(dur.whole_nanoseconds());
    ///
    /// assert_eq!("2015-10-19T01:58:38+00:00", ts.format(Format::Rfc3339));
    /// ```
    #[allow(clippy::unreadable_literal, clippy::cast_possible_wrap)]
    fn timestamp(&self) -> i64 {
        // Discord's custom epoch, the unix time in milliseconds for the first second of 2015.
        const DISCORD_EPOCH: u64 = 1420070400000;

        ((self.id() >> 22) + DISCORD_EPOCH) as i64
    }

    /// The internal worker id that generated the Snowflake.
    ///
    /// 5 bits
    #[allow(clippy::unreadable_literal, clippy::cast_possible_truncation)]
    fn worker_id(&self) -> u8 {
        ((self.id() & 0x3E0000) >> 17) as u8
    }

    /// The internal process id that generated the Snowflake.
    ///
    /// 5 bits
    #[allow(clippy::cast_possible_truncation)]
    fn process_id(&self) -> u8 {
        ((&self.id() & 0x1F000) >> 12) as u8
    }

    /// The increment of the Snowflake. For every id that is generated on a process, this number is
    /// incremented.
    ///
    /// 12 bits
    #[allow(clippy::cast_possible_truncation)]
    fn increment(&self) -> u16 {
        (&self.id() & 0xFFF) as u16
    }
}

#[cfg(test)]
#[allow(clippy::unreadable_literal)]
mod tests {
    use super::Snowflake;
    use crate::id::{
        AttachmentId, AuditLogEntryId, ChannelId, EmojiId, GenericId, GuildId, IntegrationId,
        MessageId, RoleId, UserId, WebhookId,
    };

    const ID: u64 = 105484726235607040;

    #[test]
    fn test_timestamp() {
        let expected: i64 = 1445219918546;

        let ids: Vec<Box<dyn Snowflake>> = vec![
            Box::new(AttachmentId(ID)),
            Box::new(AuditLogEntryId(ID)),
            Box::new(ChannelId(ID)),
            Box::new(EmojiId(ID)),
            Box::new(GenericId(ID)),
            Box::new(GuildId(ID)),
            Box::new(IntegrationId(ID)),
            Box::new(MessageId(ID)),
            Box::new(RoleId(ID)),
            Box::new(UserId(ID)),
            Box::new(WebhookId(ID)),
        ];

        for id in ids {
            assert_eq!(expected, id.timestamp())
        }
    }
}
